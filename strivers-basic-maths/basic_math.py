# -*- coding: utf-8 -*-
"""Strivers_Basic_Math.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1ixRWQ18bOAhzGgt4aWvZk-wIyAkQm4aT
"""

""" extract Digits """
class problem1:
  def solution(self, n = None):
    while n == None:
      try:
        n = int(input("enter a number: "))
        break
      except ValueError as e:
        print(e)

    original_n = n  # Store the initial value of n

    digits = []

    if original_n == 0:  # Handle the case when the input is 0
      digits.append(0)
    else:
      # Ensure n is treated as a non-negative integer for digit extraction
      n_abs = abs(n)

      while n_abs > 0:
        last = n_abs % 10
        digits.append(last)
        n_abs = n_abs // 10        #time complexity of this problem is log10(n)

      digits.reverse()

    print(f"The original number was: {original_n}")
    print("Digits:", end = "")
    for digit in digits:
      print(digit, end = ", ")

P1 = problem1()
P1.solution()

""" Reverse a number """
class problem2:
  def solution(self, n = None):
    while n == None:
      try:
        n = int(input("enter a number: "))
        break
      except ValueError as e:
        print(e)

    if n == 0:
      return 0

    is_negetive = n < 0
    n_abs = abs(n)

    reverse_num = 0

    while n_abs > 0:
      ld = n_abs % 10
      reverse_num = reverse_num * 10 + ld
      n_abs = int( n_abs / 10)

    if is_negetive:
      reverse_num = -1 * reverse_num

    return reverse_num

p2 = problem2()
print(p2.solution())

""" check palindrome """
class problem3:
  def solution(self, n = None):
    while n == None:
      try:
        n = int(input("enter a number: "))
        break
      except:
        print("Please enter a valid number")

    if n < 0:
      return False

    og_n = n
    reverse_num = 0

    while n > 0:
      ld = n % 10
      reverse_num = reverse_num * 10 + ld
      n = int( n / 10 )

    return reverse_num == og_n

p3 = problem3()
p3.solution()

"""chekc armstrong number"""

class problem4:
  def solution(self, n = None):
    while n == None:
      try:
        n = int(input("enter a number: "))
        break
      except:
        print("Please enter a valid number")

    if n < 0:
      return False

    og_n = n
    arm_num = 0

    while n > 0:
      ld = n % 10
      arm_num = arm_num + ld ** 3
      n = int( n / 10 )

    return arm_num == og_n

p4 = problem4()
p4.solution()

""" check for prime : all natural(no decimals or negetives)
    numebrs that have 2 specific positive factors: 1 & itself --
    Using O(sqrt(n)) """

import math

class problem5:
  def solution(self, n = None):
    while n == None:
      try:
        n = int(input("enter a number: "))
        break
      except:
        print("Please enter a valid number")

    if n <= 1:
      return False

    for i in range(2, int(math.sqrt(n) + 1)):
      if n % i == 0:
        return False

    return True

p5 = problem5()
p5.solution()

""" print all the divisors --
    Using O(sqrt(n)) """

class problem6:
  def solution(self, n = None):
    while n == None:
      try:
        n = int(input("enter a number: "))
        break
      except:
        print("Please enter a valid number")

    divisors = []
    for i in range(1, int(n ** (1/2) + 1)):
      if n % i == 0:
        divisors.append(i)
        if i != n // i:
          divisors.append(n // i)

    divisors.sort()
    return divisors

p6 = problem6()
p6.solution()

""" GCD: greatest common divisor """
class problem7:
  def solution(self, n1 = None, n2 = None):
    while n1 == None and n2 == None:
      try:
        n1 = int(input("enter number1: "))
        n2 = int(input("enter number2: "))
        break
      except:
        print("Please enter a valid number")

    for i in range(min(n1, n2), 0, -1):
     if n1 % i == 0 and n2 % i == 0:
      return i

    return 1

p7 = problem7()
p7.solution()

""" LCM: Least Common Multiple """

class problem8:
  def solution(self, n1 = None, n2 = None):
    while n1 == None and n2 == None:
      try:
        n1 = int(input("enter number1: "))
        n2 = int(input("enter number2: "))
        break
      except:
        print("Please enter a valid number")


    while n1 > 0 and n2 > 0:
      if n1 > n2:
        n1 = n1 % n2
      else:
        n2 = n2 % n1

    if n1 == 0:
      return n2
    else:
      return n1

p8 = problem8()
p8.solution()
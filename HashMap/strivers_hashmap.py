# -*- coding: utf-8 -*-
"""Strivers_HashMap.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/18Q8KY2FJPlk9jaXOs558inxV5Zy2J4V8
"""

#HashMap
def hashMap():
  n = int(input())

  arr =[]
  for i in range(n):
    arr.append(int(input(f"input {i}th element of the array")))
  print(arr)

  hash = [0 for i in range(13)]
  print(hash)

  for num in arr:
    hash[num] += 1

  q = int(input("no. of querries: "))
  for _ in range(q):
    query = int(input("query: "))
    print(hash[query])



hashMap()

#hashMap 2
def hashMap():
  n = input("input the numbers with spaces: ")
  arr = list(map(int, n.split()))
  print(arr)

  max_size = max(arr)
  hash = [0 for i in range(max_size + 1)]
  #hash = [0] * (max_size + 1)
  print(hash)

  #pre calculation
  for num in arr:
    hash[num] += 1

  q = int(input("no. of querries: "))
  q_list = []
  for _ in range(q):
    query = q_list.append(int(input("query: ")))

  #fetch
  for query in q_list:
    if query > max_size:
      print(0, end = " ")
    else:
      print(hash[query], end = " ")




hashMap()

def hashMap():
  n = input("input the numbers with spaces")
  arr = list(n)
  print(arr)

hashMap()

#HashMap - Character Lower Case
def hashMap():
  s = input("put in a  string: ")

  #pre computing
  hash = [0 for i in range(26)]

  for ch in s:
    hash[ord(ch) - ord('a')] += 1

  n_q = int(input())

  for i in range(n_q):
    q = input()

    #fetch
    print(hash[ord(q) - ord('a')])

hashMap()

#HashMap - Characters
def hashMap():
  s = input("put in a  string: ")

  #pre computing
  hash = [0 for i in range(256)]

  for ch in s:
    hash[ord(ch)] += 1

  n_q = int(input())

  for i in range(n_q):
    q = input()

    #fetch
    print(hash[ord(q)])

hashMap()

class Solution:
    def countFrequencies(self, nums):
        size = max(nums) + 1

        hash = [0 for i in range(size)]

        for num in nums:
            hash[num] += 1

        l = []
        seen = set()
        for num in nums:
          if num not in seen:
             l.append([num, hash[num]])
             seen.add(num)

        # for i in range(size):
        #   if hash[i] > 0:
        #     l.append([i, hash[i]])
        return l

s = Solution()
s.countFrequencies([2, 2, 2, 1, 3])

class Solution:
    def countFrequencies(self, nums):
        size = max(nums) + 1

        hash = [0 for i in range(size)]

        for num in nums:
            hash[num] += 1

        l = []
        max_freq = 0
        for i in range(size):
          if hash[i] > 0:
             l.append([i, hash[i]])
             max_freq = max(max_freq, hash[i])

        print(l)

        result = []
        for num, value in l:
          if value == max_freq:
            result.append(num)

        print(min(result))

s = Solution()
s.countFrequencies([2, 2, 2, 1, 3])

#Frequency of most frequent elements - Leetcode
from typing import List

class solution:
  def mostFrqElement(self, nums: List[int], k: int) -> int:
    r = 0
    l = 0

    result = 0
    total = 0

    while r < len(nums):
      total += nums[r]

      while nums[r] * (r - l + 1) > total + k:
        total -= nums[l]
        l += 1

      result = max(result, r - l + 1)
      r += 1

    return result

s = solution()
s.mostFrqElement([1,4,8,13], 5)

